{
  "_args": [
    [
      "padlock@1.1.2",
      "/project"
    ]
  ],
  "_from": "padlock@1.1.2",
  "_id": "padlock@1.1.2",
  "_inBundle": false,
  "_integrity": "sha1-E/FCuCrAzhLWEsaNMAi0JFa6DLc=",
  "_location": "/padlock",
  "_phantomChildren": {},
  "_requested": {
    "type": "version",
    "registry": true,
    "raw": "padlock@1.1.2",
    "name": "padlock",
    "escapedName": "padlock",
    "rawSpec": "1.1.2",
    "saveSpec": null,
    "fetchSpec": "1.1.2"
  },
  "_requiredBy": [
    "/monaca-lib"
  ],
  "_resolved": "https://registry.npmjs.org/padlock/-/padlock-1.1.2.tgz",
  "_spec": "1.1.2",
  "_where": "/project",
  "author": {
    "name": "Nathan Fritz",
    "email": "nathan@andyet.net",
    "url": "http://andyet.net/team/nathan"
  },
  "bugs": {
    "url": "https://github.com/andyet/padlock/issues"
  },
  "contributors": [],
  "dependencies": {},
  "description": "Padlock works to prevent unexpected code execution when dealing with asynchronous callbacks without blocking. Call a function with lock to execute it as soon as a lock can be attained, and unlock it at all of your possible callback end-points. Use the same lock on other functions that you don't want to interrupt. Code will execute in order as the lock can be acquired.",
  "homepage": "http://github.com/andyet/padlock",
  "keywords": [
    "lock",
    "flow",
    "control",
    "flow-control",
    "acquire",
    "release",
    "synchronous",
    "asynchronous"
  ],
  "main": "./padlock.js",
  "name": "padlock",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/andyet/padlock.git"
  },
  "version": "1.1.2"
}
